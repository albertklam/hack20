{"version":3,"sources":["maskemoji.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","tf","require","ImageForm","props","state","selectedFile","handleChange","bind","handleSubmit","onSubmit","this","method","enctype","style","fontSize","color","type","multiple","accept","name","onChange","value","e","setState","target","preventDefault","id","crossorigin","src","alt","run","automl","loadImageClassification","model","image","document","getElementById","classify","predictions","console","log","pre","createElement","textContent","JSON","stringify","body","append","React","Component","App","className","logo","textAlign","padding","href","textDecoration","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,uC,kVCGrCC,G,MAAKC,EAAQ,K,IAgDbC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,aAAc,MAC5B,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJH,E,qDASjB,OACE,0BAAME,SAAUC,KAAKF,aAAcG,OAAO,OAAOC,QAAQ,uBACvD,uBAAGC,MAAO,CAACC,SAAU,GAAIC,MAAO,WAAhC,sBACA,2BAAOC,KAAK,OAAOC,SAAS,QAAQC,OAAO,UAAUC,KAAK,OAAOC,SAAUV,KAAKJ,eAChF,2BAAOU,KAAK,SAASG,KAAK,SAASE,MAAM,c,mCAKlCC,GACXZ,KAAKa,SAAS,CAAElB,aAAciB,EAAEE,OAAOH,U,mCAG5BC,GAEX,OADAA,EAAEG,iBAEA,6BACE,yBAAKC,GAAG,QAAQC,YAAY,YAAYC,IAAKlB,KAAKN,MAAMC,aAAcwB,IAAI,yBACzEnB,KAAKoB,S,kKAMU9B,EAAG+B,OAAOC,wBAAwB,c,cAAhDC,E,OACAC,EAAQC,SAASC,eAAe,S,SACZH,EAAMI,SAASH,G,OAAnCI,E,OAENC,QAAQC,IAAIF,IAGNG,EAAMN,SAASO,cAAc,QAC/BC,YAAcC,KAAKC,UAAUP,EAAa,KAAM,GACpDH,SAASW,KAAKC,OAAON,G,uGA3CDO,IAAMC,WAiDfC,EA7Ff,WACE,OACE,6BACE,4BAAQtB,IAAI,uCACZ,4BAAQA,IAAI,8CAEZ,yBAAKuB,UAAU,OACb,4BAAQA,UAAU,cAChB,iDAGA,yBAAKvB,IAAKwB,IAAMD,UAAU,WAAWtB,IAAI,UAE3C,4BAAQsB,UAAU,YAChB,uBAAGtC,MAAO,CAACE,MAAO,UAAlB,oPAIA,wBAAIF,MAAO,CAACwC,UAAW,SACrB,oGACA,sGACA,6CAEF,uBAAGxC,MAAO,CAACE,MAAO,UAAlB,+MAKA,kBAAC,EAAD,UAEA,uBAAGF,MAAO,CAACyC,QAAS,KAApB,2CAEE,uBAAGC,KAAK,kLACR1C,MAAO,CAAC2C,eAAgB,SADxB,WAIF,uBAAGD,KAAK,uCAAuC1C,MAAO,CAACE,MAAO,QAASyC,eAAgB,OAAQ1C,SAAU,GAAIwC,QAAS,KAAtH,qBC/BUG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7B,SAASC,eAAe,SDyHpB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.57d08f13.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/maskemoji.dd501fde.png\";","import React from 'react';\r\nimport logo from './maskemoji.png';\r\nimport './App.css';\r\nconst tf = require('@tensorflow/tfjs');\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <script src=\"https://unpkg.com/@tensorflow/tfjs\"/>\r\n      <script src=\"https://unpkg.com/@tensorflow/tfjs-automl\"/>\r\n\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <p>\r\n            Face Mask Detector\r\n          </p>\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </header>\r\n        <header className=\"App-body\">\r\n          <p style={{color: 'black'}}>\r\n            Wearing a face mask is a deemed as a way to slow the spread of the virus amid the COVID-19 pandemic.\r\n            Our team trained a model that detects whether a person in an image has face mask on or not. The model can be used in various ways, such as:\r\n          </p>\r\n          <ul style={{textAlign: 'left'}}>\r\n            <li> For use in grocery stores where face masks are required for entry. </li>\r\n            <li> Detecting if a person at a door is wearing a mask before you open it.</li>\r\n            <li> And more...</li>\r\n          </ul>\r\n          <p style={{color: 'black'}}>\r\n            You can upload an image here and we'll detect the presence of masks. While this may be a trivial application for our model, it serves the purpose of demonstrating\r\n            the accuracy and concept of our project.\r\n          </p>\r\n          \r\n          <ImageForm> </ImageForm>\r\n\r\n          <p style={{padding: 50}}>\r\n            Learn more about the importance of masks \r\n            <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/prevent-getting-sick/cloth-face-cover-guidance.html#:~:text=Masks%20are%20recommended%20as%20a,This%20is%20called%20source%20control.\"\r\n            style={{textDecoration: 'none'}}> here.</a>\r\n          </p>\r\n          \r\n          <a href=\"https://github.com/albertklam/hack20\" style={{color: 'brown', textDecoration: 'none', fontSize: 16, padding: 50}}> Source Code </a>\r\n        </header>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nclass ImageForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {selectedFile: null};\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} method=\"POST\" enctype=\"multipart/form-data\">\r\n        <p style={{fontSize: 40, color: 'yellow'}}>Upload your image:</p>\r\n        <input type=\"file\" multiple=\"false\" accept=\"image/*\" name=\"file\" onChange={this.handleChange}></input>\r\n        <input type=\"submit\" name=\"submit\" value=\"Submit\"></input>\r\n      </form>\r\n    );\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ selectedFile: e.target.value });\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    return (\r\n      <div>\r\n        <img id=\"image\" crossorigin=\"anonymous\" src={this.state.selectedFile} alt=\"This is not an image\"/>\r\n        {this.run()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  async run() {\r\n    const model = await tf.automl.loadImageClassification('model.json');\r\n    const image = document.getElementById('image');\r\n    const predictions = await model.classify(image);\r\n\r\n    console.log(predictions);\r\n\r\n    // Show the resulting object on the page.\r\n    const pre = document.createElement('pre');\r\n    pre.textContent = JSON.stringify(predictions, null, 2);\r\n    document.body.append(pre);\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}